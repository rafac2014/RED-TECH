//
// Copyright 2021 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

// go/keep-sorted start
@use 'sass:map';
// go/keep-sorted end
// go/keep-sorted start
@use '../../motion/animation';
@use '../../sass/shape';
@use '../../sass/theme';
@use './md-comp-outlined-field';
@use './shared';
// go/keep-sorted end

$_animation-duration: 150ms;

@mixin theme($tokens) {
  $reference: md-comp-outlined-field.values();
  // Add resolved tokens so that $theme may specify them.
  $reference: map.merge($reference, shared.resolve-tokens($reference));
  $tokens: theme.validate-theme($reference, $tokens);
  $tokens: shared.resolve-tokens($tokens);
  $tokens: theme.create-theme-vars($tokens, 'outlined-field');
  $tokens: shape.resolve-tokens($tokens, 'container-shape');

  @include theme.emit-theme-vars($tokens);
}

@mixin styles() {
  $tokens: md-comp-outlined-field.values();
  $tokens: shared.resolve-tokens($tokens);
  $tokens: theme.create-theme-vars($tokens, 'outlined-field');
  $tokens: shape.resolve-tokens($tokens, 'container-shape');

  :host {
    @each $token, $value in $tokens {
      --_#{$token}: #{$value};
    }
  }

  .outline {
    border-start-start-radius: var(--_container-shape-start-start);
    border-start-end-radius: var(--_container-shape-start-end);
    border-end-end-radius: var(--_container-shape-end-end);
    border-end-start-radius: var(--_container-shape-end-start);
    border-color: var(--_outline-color);
    color: var(--_outline-color); // Needed for Firefox HCM
    display: flex;
    // Allow events to target elements underneath the outline, such as icons.
    pointer-events: none;
    height: 100%;
    position: absolute;
    width: 100%;
  }

  .outline-start,
  .outline-panel-inactive,
  .outline-panel-active,
  .outline-end {
    // ::before is inactive border, ::after is active border. Borders are
    // absolutely positioned within their elements.
    &::before,
    &::after {
      border: inherit;
      content: '';
      inset: 0;
      position: absolute;
    }
  }

  .outline-start,
  .outline-end {
    border: inherit;
    border-radius: inherit;
    box-sizing: border-box;
    position: relative;

    &::before,
    &::after {
      border-bottom-style: solid;
      border-top-style: solid;
    }

    &::after {
      opacity: 0;
      transition: animation.standard(opacity, $_animation-duration);
    }
  }

  .focused .outline-start::after,
  .focused .outline-end::after {
    opacity: 1;
  }

  .outline-start {
    &::before,
    &::after {
      border-inline-start-style: solid;
      border-inline-end-style: none;
      border-start-start-radius: inherit;
      border-start-end-radius: 0;
      border-end-start-radius: inherit;
      border-end-end-radius: 0;
      margin-inline-end: var(--_outline-label-padding);
    }
  }

  .outline-end {
    flex-grow: 1;
    margin-inline-start: calc(-1 * var(--_outline-label-padding));

    &::before,
    &::after {
      border-inline-start-style: none;
      border-inline-end-style: solid;
      border-start-start-radius: 0;
      border-start-end-radius: inherit;
      border-end-start-radius: 0;
      border-end-end-radius: inherit;
    }
  }

  .outline-notch {
    align-items: flex-start;
    border: inherit;
    display: flex;
    margin-inline-start: calc(-1 * var(--_outline-label-padding));
    margin-inline-end: var(--_outline-label-padding);
    max-width: calc(100% - 2 * var(--_container-padding-horizontal));
    padding: 0 var(--_outline-label-padding);
    position: relative;
  }

  .no-label .outline-notch {
    display: none;
  }

  .outline-panel-inactive,
  .outline-panel-active {
    border: inherit;
    border-bottom-style: solid;
    inset: 0;
    position: absolute;

    &::before,
    &::after {
      border-top-style: solid;
      border-bottom: none;
      bottom: auto;
      transform: scaleX(1);
      transition: animation.standard(transform, $_animation-duration);
    }

    // Note: no need to do any RTL flipping here. If RTLCSS flips this, it's also
    // ok, we just need one to be left and one to be right.
    &::before {
      right: 50%;
      transform-origin: top left;
    }

    &::after {
      left: 50%;
      transform-origin: top right;
    }
  }

  .populated .outline-panel-inactive,
  .populated .outline-panel-active,
  .focused .outline-panel-inactive,
  .focused .outline-panel-active {
    &::before,
    &::after {
      transform: scaleX(0);
    }
  }

  .outline-panel-active {
    opacity: 0;
    transition: animation.standard(opacity, $_animation-duration);
  }

  .focused .outline-panel-active {
    opacity: 1;
  }

  .label.floating {
    // Center the label within the outline stroke
    transform: translateY(calc(-100% + var(--_label-text-padding-bottom)));
  }

  // Add padding that will grow to compensate for the outline's shape.
  // This is needed to prevent the outline border from clipping with the label
  // and is mirrored in the container padding to align the content and resting
  // label with the adjusted floating label.
  $shape-start: max(
    var(--_container-shape-start-start),
    var(--_container-shape-end-start)
  );
  $shape-end: max(
    var(--_container-shape-start-end),
    var(--_container-shape-end-end)
  );

  .outline-start,
  .field:not(.with-start) .start {
    padding-inline-start: max(
      var(--_container-padding-horizontal),
      $shape-start + var(--_outline-label-padding)
    );
  }

  .field:not(.with-end) .end {
    padding-inline-end: max(var(--_container-padding-horizontal), $shape-end);
  }

  .outline-start::before,
  .outline-end::before,
  .outline-panel-inactive,
  .outline-panel-inactive::before,
  .outline-panel-inactive::after {
    border-width: var(--_outline-width);
  }

  // States

  :hover .outline {
    border-color: var(--_hover-outline-color);
    color: var(--_hover-outline-color); // Needed for Firefox HCM
  }

  :hover .outline-start::before,
  :hover .outline-end::before,
  :hover .outline-panel-inactive,
  :hover .outline-panel-inactive::before,
  :hover .outline-panel-inactive::after {
    border-width: var(--_hover-outline-width);
  }

  .focused .outline {
    border-color: var(--_focus-outline-color);
    color: var(--_focus-outline-color); // Needed for Firefox HCM
  }

  .outline-start::after,
  .outline-end::after,
  .outline-panel-active,
  .outline-panel-active::before,
  .outline-panel-active::after {
    border-width: var(--_focus-outline-width);
  }

  .disabled .outline {
    border-color: var(--_disabled-outline-color);
    color: var(--_disabled-outline-color); // Needed for Firefox HCM
  }

  .disabled .outline-start,
  .disabled .outline-end,
  .disabled .outline-panel-inactive {
    opacity: var(--_disabled-outline-opacity);
  }

  .disabled .outline-start::before,
  .disabled .outline-end::before,
  .disabled .outline-panel-inactive,
  .disabled .outline-panel-inactive::before,
  .disabled .outline-panel-inactive::after {
    border-width: var(--_disabled-outline-width);
  }

  .error .outline {
    border-color: var(--_error-outline-color);
    color: var(--_error-outline-color); // Needed for Firefox HCM
  }

  .error:hover .outline {
    border-color: var(--_error-hover-outline-color);
    // Needed for Firefox HCM
    color: var(--_error-hover-outline-color);
  }

  .error.focused .outline {
    border-color: var(--_error-focus-outline-color);
    // Needed for Firefox HCM
    color: var(--_error-focus-outline-color);
  }
}
