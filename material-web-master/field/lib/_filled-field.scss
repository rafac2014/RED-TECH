//
// Copyright 2021 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

// go/keep-sorted start
@use 'sass:map';
// go/keep-sorted end
// go/keep-sorted start
@use '../../motion/animation';
@use '../../sass/resolvers';
@use '../../sass/shape';
@use '../../sass/theme';
@use './md-comp-filled-field';
@use './shared';
// go/keep-sorted end

$_animation-duration: 150ms;

@mixin theme($tokens) {
  $reference: md-comp-filled-field.values();
  // Add resolved tokens so that $theme may specify them.
  $reference: map.merge($reference, shared.resolve-tokens($reference));
  $tokens: theme.validate-theme($reference, $tokens);
  $tokens: shared.resolve-tokens($tokens);
  $tokens: theme.create-theme-vars($tokens, 'filled-field');
  $tokens: shape.resolve-tokens($tokens, 'container-shape');

  @include theme.emit-theme-vars($tokens);
}

@mixin styles() {
  $tokens: md-comp-filled-field.values();
  $tokens: shared.resolve-tokens($tokens);
  $tokens: theme.create-theme-vars($tokens, 'filled-field');
  $tokens: shape.resolve-tokens($tokens, 'container-shape');

  :host {
    @each $token, $value in $tokens {
      --_#{$token}: #{$value};
    }
  }

  .container {
    border-start-start-radius: var(--_container-shape-start-start);
    border-start-end-radius: var(--_container-shape-start-end);
    border-end-end-radius: var(--_container-shape-end-end);
    border-end-start-radius: var(--_container-shape-end-start);
    // If bottom corner radii are set, prevent the active indicator from
    // overflowing.
    overflow: hidden;
    // Needed for negative z-index below to place background and state layer
    // behind content.
    z-index: 0;

    // ::before is used for background color so that opacity may be changed
    // without affecting content
    &::before {
      background: var(--_container-color);
    }

    // ::after is used for the state layer color and opacity
    &::after {
      visibility: hidden;
    }

    &::before,
    &::after {
      border-radius: inherit;
      content: '';
      display: flex;
      height: 100%;
      position: absolute;
      width: 100%;
      z-index: -1;
    }
  }

  .label.floating {
    position: absolute;
    top: 0;
  }

  .state-layer {
    border-radius: inherit;
    height: 100%;
    position: absolute;
    width: 100%;
    visibility: hidden;
    z-index: -1;
  }

  .field:not(.disabled):hover .state-layer {
    visibility: visible;
  }

  .active-indicator {
    // Prevent click events on the indicator element since it has no width and
    // causes bugs when handled by the foundation for updating transform-origin.
    inset: auto 0 0 0;
    pointer-events: none;
    position: absolute;
    width: 100%;

    &::before,
    &::after {
      border-bottom: var(--_active-indicator-height) solid
        var(--_active-indicator-color);
      inset: auto 0 0 0;
      content: '';
      position: absolute;
      width: 100%;
    }

    // focused indicator
    &::after {
      opacity: 0;
      transform: scaleX(0);
      // The element needs to update the transform-origin style attribute in
      // response to click events. Psuedo elements cannot have their style
      // updated, but their transform-origin can be inherited.
      transform-origin: inherit;
      // Add two transitions: opacity and a delayed transform. With a non-delayed
      // transform transition on the focus selector without an opacity transition,
      // this will result in the indicator scaling on enter and fading on exit.
      transition: animation.standard(opacity, $_animation-duration),
        transform 0s ease $_animation-duration;
    }
  }

  .focused .active-indicator::after {
    opacity: 1;
    transform: scaleX(1);
    transition: animation.standard(transform, $_animation-duration);
  }

  .field:not(.with-start) .start {
    padding-inline-start: var(--_container-padding-horizontal);
  }

  .field:not(.with-end) .end {
    padding-inline-end: var(--_container-padding-horizontal);
  }

  .field:not(.no-label) .container {
    padding-bottom: var(--_with-label-container-padding-vertical);
    padding-top: var(--_with-label-container-padding-vertical);
  }

  .field:not(.no-label) .middle {
    padding-top: var(--_label-text-populated-line-height);
  }

  :hover .active-indicator::before {
    border-bottom-color: var(--_hover-active-indicator-color);
    border-bottom-width: var(--_hover-active-indicator-height);
  }

  // Focus is on a separate element and does not need a focus selector
  .active-indicator::after {
    border-bottom-color: var(--_focus-active-indicator-color);
    border-bottom-width: var(--_focus-active-indicator-height);
  }

  :hover .state-layer {
    background: var(--_hover-state-layer-color);
    opacity: var(--_hover-state-layer-opacity);
  }

  .disabled .active-indicator::before {
    border-bottom-color: var(--_disabled-active-indicator-color);
    border-bottom-width: var(--_disabled-active-indicator-height);
    opacity: var(--_disabled-active-indicator-opacity);
  }

  .disabled .container::before {
    background: var(--_disabled-container-color);
    opacity: var(--_disabled-container-opacity);
  }

  .error .active-indicator::before {
    border-bottom-color: var(--_error-active-indicator-color);
  }

  .error:hover .active-indicator::before {
    border-bottom-color: var(--_error-hover-active-indicator-color);
  }

  .error:hover .state-layer {
    background: var(--_error-hover-state-layer-color);
    opacity: var(--_error-hover-state-layer-opacity);
  }

  // Focus is on a separate element and does not need a focus selector
  .error .active-indicator::after {
    border-bottom-color: var(--_error-focus-active-indicator-color);
  }
}
