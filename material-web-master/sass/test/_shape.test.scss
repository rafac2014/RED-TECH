//
// Copyright 2021 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

// go/keep-sorted start
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'true' as test;
// go/keep-sorted end
// go/keep-sorted start
@use '../resolvers';
@use '../shape';
@use '../theme';
@use '../var';
// go/keep-sorted end

@include test.describe('shape') {
  @include test.describe('resolver()') {
    @include test.it('should return null for all corners if given null') {
      // Test Case.
      $result: shape.resolver(
        $shape: null,
      );

      // Assertion.
      $is-map: meta.type-of($result) == 'map';
      @include test.assert-true(
        $is-map,
        $description: 'Should always return a Map'
      );
      @include test.assert-equal(
        map.get($result, start-start),
        null,
        $description: 'start-start should be null'
      );
      @include test.assert-equal(
        map.get($result, start-end),
        null,
        $description: 'start-end should be null'
      );
      @include test.assert-equal(
        map.get($result, end-end),
        null,
        $description: 'end-end should be null'
      );
      @include test.assert-equal(
        map.get($result, end-start),
        null,
        $description: 'end-start should be null'
      );
    }

    @include test.it('should expand radius number to all corners') {
      // Test Case.
      $result: shape.resolver(
        $shape: 8px,
      );

      // Assertion.
      $is-map: meta.type-of($result) == 'map';
      @include test.assert-true(
        $is-map,
        $description: 'Should always return a Map'
      );
      @include test.assert-equal(
        map.get($result, start-start),
        8px,
        $description: 'start-start should be same as input'
      );
      @include test.assert-equal(
        map.get($result, start-end),
        8px,
        $description: 'start-end should be same as input'
      );
      @include test.assert-equal(
        map.get($result, end-end),
        8px,
        $description: 'end-end should be same as input'
      );
      @include test.assert-equal(
        map.get($result, end-start),
        8px,
        $description: 'end-start should be same as input'
      );
    }

    @include test.it('should expand radius list with 1 to all corners') {
      // Test Case.
      $result: shape.resolver(
        $shape: (
          16px,
        ),
      );

      // Assertion.
      $is-map: meta.type-of($result) == 'map';
      @include test.assert-true(
        $is-map,
        $description: 'Should always return a Map'
      );
      @include test.assert-equal(
        map.get($result, start-start),
        16px,
        $description: 'start-start should be the first corner'
      );
      @include test.assert-equal(
        map.get($result, start-end),
        16px,
        $description: 'start-end should be the first corner'
      );
      @include test.assert-equal(
        map.get($result, end-end),
        16px,
        $description: 'end-end should be the first corner'
      );
      @include test.assert-equal(
        map.get($result, end-start),
        16px,
        $description: 'end-start should be the first corner'
      );
    }

    @include test.it('should expand radius list with 2 to correct corners') {
      // Test Case.
      $result: shape.resolver(
        $shape: (
          8px,
          16px,
        ),
      );

      // Assertion.
      $is-map: meta.type-of($result) == 'map';
      @include test.assert-true(
        $is-map,
        $description: 'Should always return a Map'
      );
      @include test.assert-equal(
        map.get($result, start-start),
        8px,
        $description: 'start-start should be the first corner'
      );
      @include test.assert-equal(
        map.get($result, start-end),
        16px,
        $description: 'start-end should be the second corner'
      );
      @include test.assert-equal(
        map.get($result, end-end),
        8px,
        $description: 'end-end should be the first corner'
      );
      @include test.assert-equal(
        map.get($result, end-start),
        16px,
        $description: 'end-start should be the second corner'
      );
    }

    @include test.it('should expand radius list with 3 to correct corners') {
      // Test Case.
      $result: shape.resolver(
        $shape: (
          8px,
          16px,
          24px,
        ),
      );

      // Assertion.
      $is-map: meta.type-of($result) == 'map';
      @include test.assert-true(
        $is-map,
        $description: 'Should always return a Map'
      );
      @include test.assert-equal(
        map.get($result, start-start),
        8px,
        $description: 'start-start should be the first corner'
      );
      @include test.assert-equal(
        map.get($result, start-end),
        16px,
        $description: 'start-end should be the second corner'
      );
      @include test.assert-equal(
        map.get($result, end-end),
        24px,
        $description: 'end-end should be the third corner'
      );
      @include test.assert-equal(
        map.get($result, end-start),
        16px,
        $description: 'end-start should be the second corner'
      );
    }

    @include test.it('should expand radius list with 4 to correct corners') {
      // Test Case.
      $result: shape.resolver(
        $shape: (
          8px,
          16px,
          24px,
          0,
        ),
      );

      // Assertion.
      $is-map: meta.type-of($result) == 'map';
      @include test.assert-true(
        $is-map,
        $description: 'Should always return a Map'
      );
      @include test.assert-equal(
        map.get($result, start-start),
        8px,
        $description: 'start-start should be the first corner'
      );
      @include test.assert-equal(
        map.get($result, start-end),
        16px,
        $description: 'start-end should be the second corner'
      );
      @include test.assert-equal(
        map.get($result, end-end),
        24px,
        $description: 'end-end should be the third corner'
      );
      @include test.assert-equal(
        map.get($result, end-start),
        0,
        $description: 'end-start should be the fourth corner'
      );
    }
  }

  @include test.describe('corners-to-shape-token') {
    @include test.it('should return a list with expanded radius list') {
      $result: shape.corners-to-shape-token(foo);

      @include test.assert-equal(meta.type-of($result), 'list');
      @include test.assert-equal(list.length($result), 4);

      @include test.assert-equal(
        list.nth($result, 1),
        var.create(foo-start-start)
      );
      @include test.assert-equal(
        list.nth($result, 2),
        var.create(foo-start-end)
      );
      @include test.assert-equal(list.nth($result, 3), var.create(foo-end-end));
      @include test.assert-equal(
        list.nth($result, 4),
        var.create(foo-end-start)
      );
    }
  }

  @include test.describe('resolve-tokens') {
    // Setup.
    $theme: (
      not-a-shape-token: 24px,
      container-shape: 8px,
      root-shape: (
        1px,
        2px,
        3px,
        4px,
      ),
    );

    @include test.it('should expand shape tokens into 4 corner tokens') {
      $tokens: theme.create-theme-vars($theme, foo);
      // Test Case.
      $result: shape.resolve-tokens($tokens, root-shape, container-shape);

      // Assertion.
      $expected: (
        container-shape-start-start:
          var(
            --md-foo-container-shape-start-start,
            var(--md-foo-container-shape, 8px)
          ),
        container-shape-start-end:
          var(
            --md-foo-container-shape-start-end,
            var(--md-foo-container-shape, 8px)
          ),
        container-shape-end-end:
          var(
            --md-foo-container-shape-end-end,
            var(--md-foo-container-shape, 8px)
          ),
        container-shape-end-start:
          var(
            --md-foo-container-shape-end-start,
            var(--md-foo-container-shape, 8px)
          ),
        root-shape-start-start:
          var(--md-foo-root-shape-start-start, var(--md-foo-root-shape, 1px)),
        root-shape-start-end:
          var(--md-foo-root-shape-start-end, var(--md-foo-root-shape, 2px)),
        root-shape-end-end:
          var(--md-foo-root-shape-end-end, var(--md-foo-root-shape, 3px)),
        root-shape-end-start:
          var(--md-foo-root-shape-end-start, var(--md-foo-root-shape, 4px)),
        not-a-shape-token: var(--md-foo-not-a-shape-token, 24px),
      );
      @include test.assert-equal(
        $result,
        $expected,
        $description:
          'Should expand shape tokens, remove original tokens, and not touch other tokens'
      );
    }

    @include test.it('gracefully handles missing shape tokens') {
      $tokens: theme.create-theme-vars(
        (
          shape: 10px,
          not-affected: 10px,
        ),
        foo
      );
      $result: shape.resolve-tokens($tokens, shape, missing);

      $expected: (
        shape-start-start:
          var(--md-foo-shape-start-start, var(--md-foo-shape, 10px)),
        shape-start-end:
          var(--md-foo-shape-start-end, var(--md-foo-shape, 10px)),
        shape-end-end: var(--md-foo-shape-end-end, var(--md-foo-shape, 10px)),
        shape-end-start:
          var(--md-foo-shape-end-start, var(--md-foo-shape, 10px)),
        not-affected: var(--md-foo-not-affected, 10px),
      );

      @include test.assert-equal($result, $expected);
    }
  }
}
